Making a Dockerfile tutorial

To specify a compiler, type:

```FROM gcc:x.x.x ```

where ```x.x.x``` represents the version number of the gcc compiler. Of course, other compilers can be specified too.

To specify a command to be executed, type:

```RUN "command" ```

For example, to upgrade ```apt-get```, type:

```RUN apt-get -qq update```

and:

```RUN apt-get -qq upgrade```

**NB!**

There are two highly important things to note. First of all, we will be using ```cmake```in this project to facilitate the build process. Indeed, this is a key reason why you would be interested in hosting a C++ webserver in a container. Therefore, make sure your Dockerfile has the following specified:

``` RUN apt-get -qq install cmake```

Secondly, it is necessary to move your dockerfile to its own directory.
Hence, execute the following in your terminal:

```$ cd ~/Project-folder ```

```~/Project-folder $ mkdir box ```

```~/Project-folder $ cd box ```

```~/Project-folder $ cp ../Dockerfile ~/Project-folder/box```

Once the file is in the ```box```dir, it is time to build the container. Navigate back to the root project folder ```~/Project-folder```, and execute the following:

``` $ docker build -t box```

This builds the container and may take some time based upon the dependencies you specified in the Dockerfile (libraries, tools fetched and installed via RUN commands).

To browse the directories in the container (recall this is an OS), run:

``` docker run -ti box:latest bash```

Voil√°! Your container is up and running! You can now navigate inside the container from your terminal.
